// 
// 2D simplex noise using a hash function
// Algorithm adapted from Stefan Gustavson's "Simplex Noise Demystified"
// https://weber.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf
// 

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Noise2D

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWStructuredBuffer<double2> Result;
RWStructuredBuffer<uint> perm;

int resolution;
float2 offset;
float2 scale;
float noiseWeight;
float alpha;
int seed;

static int grad3[12][3] = { 
    {1,1,0},{-1,1,0},{1,-1,0},{-1,-1,0},
    {1,0,1},{-1,0,1},{1,0,-1},{-1,0,-1},
    {0,1,1},{0,-1,1},{0,1,-1},{0,-1,-1} 
};

// This method is a *lot* faster than using (int)Math.floor(x)
int fastfloor(float x) {
    return x > 0 ? (int)x : (int)x - 1;
}

// classic dot product
float dot(float2 g, float x, float y) {
    return g.x * x + g.y * y;
}

// alpha blend
float mix(float a, float b, float t) {
    return (1 - t) * a + t * b;
}

float fade(float t) {
    return t * t * t * (t * (t * 6 - 15) + 10);
}

// 2D simplex noise
static float noise(float xin, float yin) {
    yin = yin / scale.y + offset.y;
    xin = xin / scale.x + offset.x;

    float n0, n1, n2; // Noise contributions from the three corners
    
    // Skew the input space to determine which simplex cell we're in
    float F2 = 0.5 * (sqrt(3.0) - 1.0);
    float s = (xin + yin) * F2; // Hairy factor for 2D
    int i = fastfloor(xin + s);
    int j = fastfloor(yin + s);
    
    float G2 = (3.0 - sqrt(3.0)) / 6.0;
    float t = (i + j) * G2;
    float X0 = i - t; // Unskew the cell origin back to (x,y) space
    float Y0 = j - t;
    float x0 = xin - X0; // The x,y distances from the cell origin
    float y0 = yin - Y0;

    // For the 2D case, the simplex shape is an equilateral triangle.
    // Determine which simplex we are in.
    int i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
    if (x0 > y0) 
    { 
        i1 = 1; 
        j1 = 0; 
    } // lower triangle, XY order: (0,0)->(1,0)->(1,1)
    else 
    { 
        i1 = 0; 
        j1 = 1; 
    } // upper triangle, YX order: (0,0)->(0,1)->(1,1)
    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
    // c = (3-sqrt(3))/6
    
    float x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
    float y1 = y0 - j1 + G2;
    float x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords
    float y2 = y0 - 1.0 + 2.0 * G2;

    // Work out the hashed gradient indices of the three simplex corners
    int ii = i & 255;
    int jj = j & 255;
    int gi0 = perm[ii + perm[jj]] % 12;
    int gi1 = perm[ii + i1 + perm[jj + j1]] % 12;
    int gi2 = perm[ii + 1 + perm[jj + 1]] % 12;

    // Calculate the contribution from the three corners
    float t0 = 0.5 - x0 * x0 - y0 * y0;
    if (t0 < 0) 
        n0 = 0.0;
    else 
    {
        t0 *= t0;
        n0 = t0 * t0 * dot(float2(grad3[gi0][0], grad3[gi0][1]), x0, y0); // (x,y) of grad3 used for 2D gradient
    }

    float t1 = 0.5 - x1 * x1 - y1 * y1;
    if (t1 < 0) 
        n1 = 0.0;
    else 
    {
        t1 *= t1;
        n1 = t1 * t1 * dot(float2(grad3[gi1][0], grad3[gi1][1]), x1, y1);
    }

    float t2 = 0.5 - x2 * x2 - y2 * y2;
    if (t2 < 0) 
        n2 = 0.0;
    else 
    {
        t2 *= t2;
        n2 = t2 * t2 * dot(float2(grad3[gi2][0], grad3[gi2][1]), x2, y2);
    }
    // Add contributions from each corner to get the final noise value.
    // The result is scaled to return values in the interval [-1,1].
    return 70.0 * (n0 + n1 + n2);
}

[numthreads(8,8,1)]
void Noise2D (uint3 id : SV_DispatchThreadID)
{
    double n = noise(id.x, id.y) * noiseWeight + 0.5;
    Result[id.x + id.y * resolution] = double2(n, alpha);
}
